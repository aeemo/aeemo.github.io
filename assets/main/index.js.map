{"version":3,"sources":["assets/Script/fire.ts","assets/Script/game.ts","assets/Script/player.ts","assets/Script/round.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AAEM;AAGN;AAAsC;AAAtC;AAAA;AAGI;AAGA;;AAwBJ;AArBI;AAEA;AACI;AACA;AACD;AACH;AAEA;AACI;AACJ;AAEA;AACA;AAIA;AACI;AACJ;AAzBA;AADC;AACsB;AAGvB;AADC;AACkB;AANF;AADpB;AACoB;AA8BrB;AA9BA;AAAqB;;;;;;;;;ACVrB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AAEM;AAGN;AAAsC;AAAtC;AAAA;AAGI;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAEA;AAEA;;AAyEJ;AArEI;AAEC;AACI;AACA;AACA;AACJ;AAED;AACI;AAEA;AACA;AACA;AACA;AAEI;AACA;AACA;AACA;AACA;AACH;AAGL;AAEA;AACI;AACA;AACA;AACA;AAEA;AAEQ;AACP;AAEL;AAEA;AAEI;AACA;AACA;AACA;AACA;AACA;AACJ;AAEA;AACI;AAEA;AAEA;AACA;AAEA;AAEA;AACJ;AAEA;AAEA;AAEC;AAEA;AA9FD;AADC;AACsB;AAGvB;AADC;AAC6B;AAG9B;AADC;AAC0B;AAG3B;AADC;AACuB;AAGxB;AADC;AACgC;AAGjC;AADC;AACmC;AAGpC;AADC;AAC2B;AArBX;AADpB;AACoB;AAkGrB;AAlGA;AAAqB;;;;;;;;;ACVrB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AAEM;AAGN;AAAsC;AAAtC;AAAA;AAGI;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAIA;AACA;;AAuEJ;AArEI;AACI;AACA;AACI;AACA;AACI;AACA;AACJ;AACA;AACI;AACA;AACJ;AACI;AACP;AACL;AAEA;AACI;AACA;AACI;AACA;AACI;AACA;AACJ;AACA;AACI;AACA;AACP;AACL;AAEA;AAEK;AACA;AACA;AACA;AACA;AACJ;AAED;AAEC;AACG;AACA;AACA;AACA;AAEH;AAEA;AACG;AACA;AACA;AACJ;AAEA;AACA;AAEC;AAEG;AAEI;AACH;AACI;AAED;AACH;AACJ;AA7FD;AADC;AACsB;AAGvB;AADC;AAC0B;AAG3B;AADC;AAC6B;AAG9B;AADC;AACuB;AAGxB;AADC;AACyB;AAG1B;AADC;AAC+B;AAGhC;AADC;AACuB;AArBP;AADpB;AACoB;AAiGrB;AAjGA;AAAqB;;;;;;;;;ACVrB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AAEM;AAGN;AAAsC;AAAtC;AAAA;AAGI;AAGA;AAGA;AAGA;AAEA;AAEA;AAEO;;AAoDX;AAnDI;AAGC;AACG;AACA;AAEA;AACA;AACA;AAEH;AAEA;AACC;AAEA;AACA;AAEH;AAEA;AAEK;AAEA;AACA;AACA;AACA;AACC;AACD;AACA;AACJ;AAEA;AAEA;AAEC;AAEG;AAEI;AACA;AAEH;AACI;AAEJ;AACA;AACJ;AAlED;AADC;AACsB;AAGvB;AADC;AACsB;AAGvB;AADC;AACkC;AAGnC;AADC;AACgC;AAZhB;AADpB;AACoB;AAsErB;AAtEA;AAAqB","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class NewClass extends cc.Component {\n\n    @property(cc.Label)\n    label: cc.Label = null;\n\n    @property\n    speed : number = 0;\n\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        let manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n       // manager.enabledDebugDraw = true;\n    }\n\n    onCollisionEnter(other, self) {\n        this.node.destroy();\n    }\n\n    start () {\n    }\n\n    \n\n    update (dt) {\n        this.node.y += dt* this.speed*0.8;        \n    }\n        \n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class NewClass extends cc.Component {\n\n    @property(cc.Label)\n    label: cc.Label = null;\n\n    @property(cc.Prefab)\n    roundPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    background: cc.Node = null;\n\n    @property(cc.Node)\n    player : cc.Node = null;\n\n    @property(cc.Prefab)\n    congratsprefab : cc.Prefab =null;\n\n    @property(cc.AudioClip)\n    congratsAudio : cc.AudioClip = null;\n\n    @property(cc.Sprite)\n    progress : cc.Sprite = null;\n\n    shots = 0;\n\n    progress_frac = 0;\n\n    num_rounds;\n\n    // LIFE-CYCLE CALLBACKS:\n\n     onLoad () {\n         this.spawnNewRound();\n         this.shots = 0;\n         this.progress.fillRange = 0;\n     }\n\n    spawnNewRound(){\n        // Generate a new node in the scene with a preset template\n\n        let n= Math.ceil(Math.random()*5 + 4);\n        this.num_rounds =n;\n        //this.roundno=n;\n        for(let i=0; i<n;i++)\n        {\n            //let name: string ='newStar' + i.toString();\n            let newRound = cc.instantiate(this.roundPrefab);\n            this.node.addChild(newRound);\n            newRound.setPosition(this.getNewRoundPosition()); \n            newRound.getComponent('round').game = this;   \n        }\n        \n\n    }\n\n    gainScore() {\n        // Update the words of the scoreDisplay Label\n        this.shots+=1;\n        this.progress_frac = this.shots/this.num_rounds;\n        this.progress.fillRange = this.progress_frac;\n\n        if(this.shots == this.num_rounds)\n        {\n                this.congrats();\n        }\n        \n    }\n\n    congrats()\n    {\n        let newlabel  =cc.instantiate(this.congratsprefab);\n        this.node.addChild(newlabel);\n        this.node.getChildByName('player').destroy();\n        this.node.getChildByName('button').destroy();\n        cc.audioEngine.playEffect(this.congratsAudio, false);\n        this.shots = 0;    \n    }\n\n    getNewRoundPosition() {\n        var randX = 0;\n        \n        var randY = Math.random() * (this.node.height/2-20);\n       \n        var maxX = this.background.width/2;\n        //randX = (Math.random() - 0.5) * 2 * maxX;\n\n        randX = (Math.random()-0.5)*2*(maxX-20);\n       \n        return cc.v2(randX, randY);\n    }\n\n    start () {\n\n    }\n\n     update (dt) {\n        \n     }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class NewClass extends cc.Component {\n\n    @property(cc.Label)\n    label: cc.Label = null;\n\n    @property(cc.Node)\n    shotspawn : cc.Node = null;\n\n    @property(cc.Prefab)\n    fireprefab : cc.Prefab = null;\n\n    @property(cc.Node)\n    button : cc.Node = null;\n\n    @property(cc.Node)\n    firespawn: cc.Node = null;\n\n    @property(cc.AudioClip)\n    laserAudio: cc.AudioClip = null;\n\n    @property\n    rotateSpeed: number = 0;\n\n    \n\n    accLeft: boolean = false;\n    accRight: boolean = false;\n\n    onKeyDown (event: { keyCode: any; }) {\n        // Set a flag when key pressed\n        switch(event.keyCode) {\n            case cc.macro.KEY.a:\n            case cc.macro.KEY.left:\n                this.accLeft = true;\n                break;\n            case cc.macro.KEY.d:\n            case cc.macro.KEY.right:\n                this.accRight = true;\n                break;\n            case cc.macro.KEY.enter:\n                this.bulletfire();\n        }\n    }\n\n    onKeyUp (event: { keyCode: any; }) {\n        // Unset a flag when key released\n        switch(event.keyCode) {\n            case cc.macro.KEY.a:\n            case cc.macro.KEY.left:\n                this.accLeft = false;\n                break;\n            case cc.macro.KEY.d:\n            case cc.macro.KEY.right:\n                this.accRight = false;\n                break;\n        }\n    }\n\n    bulletfire()\n     {\n         let newfire: cc.Node = cc.instantiate(this.fireprefab);\n         this.firespawn.addChild(newfire);\n         newfire.setPosition(0,0);\n         newfire.angle = 0;\n         cc.audioEngine.playEffect(this.laserAudio, false);\n     }\n \n    // LIFE-CYCLE CALLBACKS:\n    \n     onLoad () {\n        //this.accLeft = false;\n        //this.accRight = false;\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n \n     }\n\n     onDestroy () {\n        // Cancel keyboard input monitoring\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    }\n\n    start () {    \n    }\n\n     update (dt:number) \n     {\n        if (this.accLeft) \n        {\n            this.node.angle += this.rotateSpeed*dt;\n        } \n        else if (this.accRight) \n        {\n            this.node.angle -= this.rotateSpeed*dt;\n        }   \n     }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class NewClass extends cc.Component {\n\n    @property(cc.Label)\n    label: cc.Label = null;\n\n    @property\n    pickRadius: number = 0;\n\n    @property(cc.AudioClip)\n    GameOverAudio: cc.AudioClip = null;\n\n    @property(cc.Prefab)\n    GameOverprefab : cc.Prefab =null;\n\n    game = null;\n\n    Borderbelow: number = -270;\n\n    public flag = false;\n    // LIFE-CYCLE CALLBACKS:\n\n\n     onLoad () {\n        //this.game.score =0;\n        //this.game = this.node.parent.getComponent('player');\n\n        let manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n        this.flag = false;\n        \n     }\n\n     onCollisionEnter(other) {\n      //this.game.score+=1;\n      \n      this.node.destroy();\n      this.game.gainScore();\n  \n   }\n\n   GameOver()\n    {\n        if(this.node.parent.getChildByName('player'))\n        {\n        this.node.parent.getChildByName('player').destroy();\n        this.node.parent.getChildByName('button').destroy();\n        let gameoverlabel = cc.instantiate(this.GameOverprefab);\n        this.node.parent.addChild(gameoverlabel);\n        }\n        // cc.audioEngine.playEffect(this.GameOverAudio, false);\n        // this.node.parent.getChildByName(\"newRound\").destroy();\n    }\n\n    start () {\n\n    }\n\n     update (dt) {\n\n        if (this.node.y < this.Borderbelow && this.flag==false)\n        {\n            this.flag=true;\n            this.GameOver();\n           \n        }\n        else if (this.flag==false)\n        {\n         this.node.y -= dt*10;\n        }\n     }\n}\n"],"file":"index.js"}